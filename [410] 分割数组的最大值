给定一个非负整数数组和一个整数 m，你需要将这个数组分成 m 个非空的连续子数组。设计一个算法使得这 m 个子数组各自和的最大值最小。

注意:
数组长度 n 满足以下条件:

1 ≤ n ≤ 1000
1 ≤ m ≤ min(50, n)
示例:

输入:
nums = [7,2,5,10,8]
m = 2

输出:
18

解释:
一共有四种方法将nums分割为2个子数组。
其中最好的方式是将其分为[7,2,5] 和 [10,8]，
因为此时这两个子数组各自的和的最大值为18，在所有情况中最小。

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/split-array-largest-sum
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。


class Solution {
public:
    int splitArray(vector<int>& nums, int m) {
        int n = nums.size();
        vector<vector<long long>> dp(n + 1, vector<long long> (m + 1, LLONG_MAX)); 
        //dp[i][j] represents the minimum value of the sum of continuous subsets by dividing the first 'i' numbers into 'j' parts;
        vector<long long> subsetsum (n + 1, 0); 
        //subsetsum[i] represents the sum of subset[0 , i - 1];
        //subsetsum[i] - sunsetsum[j] represents the sum of subset[j, i - 1];

        //subsetsum[k1] = nums[0] + nums[1] + ... + nums[k1 - 1]   the sum of first k1 numbers;
        //subsetsum[k2] = nums[0] + nums[1] + ... + nums[k1 - 1] + nums[k1] + nums[k1 + 1] + ... nums[k2 - 1]  the sum of first k2 numbers;
        //now need to cal the sum from [k1, k2 -1], it equals to subsetsum[k2] - subsetsum[k1];

        for(int i = 0; i < n; i++)
        {
            subsetsum[i + 1] = subsetsum[i] + nums[i]; 
        }
        dp[0][0] = 0; //initial status;

        for(int i = 1; i <= n; i++) //i needs reach n, becasue i and j are positive integers.
        {
            for(int j = 1; j <= min(m,i); j++ ) // mark that j won't exceed the min(m,i)
            {
                for(int k = 0; k < i; k++)
                {
                    // if divide the i numbers into two parts : the first k and i - k, note these as part1 and part2 separately;
                    // part1 need to be divided into j-1 parts, use dp[k][j-1] to note the val;
                    // part2 just equals the sum of subset[k,i-1];
                    // need the dp[i][j] is the min one 
                    dp[i][j] = min(dp[i][j],max(dp[k][j - 1], subsetsum[i] - subsetsum[k]));    
                }
            }
        }
        return (int)dp[n][m];
        // for dp[x][y], the valid status requires that (x >= y) ;
        // set the dp[x][y] as LLONG_MAX for all status that (x < y), so the result of max() won't influence the min();
        // when j equals to 1, the only valid status is that the first i numbers are divided into part2, (this is because that part1 only j-1 parts);
        // when j equals to 1, we need to cal dp[k][0], thus k should be 0, otherwise dp[k][0] is invalid;
        // obviously, dp[0][0] should be set as 0 for initial status.

    }
};





class Solution {
public:
    bool check(vector<int>& nums, int x, int m) {
        long long sum = 0;
        int cnt = 1;
        for (int i = 0; i < nums.size(); i++) {
            if (sum + nums[i] > x) {
                cnt++;
                sum = nums[i];
            } else {
                sum += nums[i];
            }
        }
        return cnt <= m;
    }

    int splitArray(vector<int>& nums, int m) {
        long long left = 0, right = 0;
        for (int i = 0; i < nums.size(); i++) {
            right += nums[i];
            if (left < nums[i]) {
                left = nums[i];
            }
        }
        while (left < right) {
            long long mid = (left + right) >> 1;
            if (check(nums, mid, m)) {
                right = mid;
            } else {
                left = mid + 1;
            }
        }
        return left;
    }
};

/* 
「使……最大值尽可能小」是二分搜索题目常见的问法。

本题中，我们注意到：当我们选定一个值 xx，我们可以线性地验证是否存在一种分割方案，满足其最大分割子数组和不超过 xx。策略如下：

贪心地模拟分割的过程，从前到后遍历数组，用 \textit{sum}sum 表示当前分割子数组的和，\textit{cnt}cnt 表示已经分割出的子数组的数量（包括当前子数组），那么每当 \textit{sum}sum 加上当前值超过了 xx，我们就把当前取的值作为新的一段分割子数组的开头，并将 \textit{cnt}cnt 加 11。遍历结束后验证是否 \textit{cnt}cnt 不超过 mm。

这样我们可以用二分查找来解决。二分的上界为数组 \textit{nums}nums 中所有元素的和，下界为数组 \textit{nums}nums 中所有元素的最大值。通过二分查找，我们可以得到最小的最大分割子数组和，这样就可以得到最终的答案了。

作者：LeetCode-Solution
链接：https://leetcode-cn.com/problems/split-array-largest-sum/solution/fen-ge-shu-zu-de-zui-da-zhi-by-leetcode-solution/
来源：力扣（LeetCode）
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。
*/
