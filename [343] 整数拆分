给定一个正整数 n，将其拆分为至少两个正整数的和，并使这些整数的乘积最大化。 返回你可以获得的最大乘积。

示例 1:

输入: 2
输出: 1
解释: 2 = 1 + 1, 1 × 1 = 1。
示例 2:

输入: 10
输出: 36
解释: 10 = 3 + 3 + 4, 3 × 3 × 4 = 36。

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/integer-break
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。



///******** 动态规划 ///////////////////////
class Solution {
public:
    int integerBreak(int n) {
       vector<int> dp(n+1,0);
       dp[1] = 0;

       for(int i = 2 ; i <= n; i ++)
       {
           for(int j = 1; j < i; j++)
           {
               dp[i] = max(dp[i], max(dp[j],j) * (i - j));  //对于数i 其可分为j 和 i-j ，对于j来说取j和dp[j]中更大的数来乘以 (i-j)，再for j 去找最大的组合
           }
       }
       return dp[n];
    }
};

///******** 数学归纳法///////////////////////
class Solution {
public:
    int integerBreak(int n) {
      if(n==2 ||n==3) return n-1;
        if(n==4 )return 4;
        n-=5;
        return (int) pow(3, (n/3+1))*(n%3+2);
    }
};
