/*
Description :

给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那 两个 整数，并返回他们的数组下标。

你可以假设每种输入只会对应一个答案。但是，数组中同一个元素不能使用两遍。

 

示例:

给定 nums = [2, 7, 11, 15], target = 9

因为 nums[0] + nums[1] = 2 + 7 = 9
所以返回 [0, 1]

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/two-sum
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
*/


class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
        unordered_map<int,int> mapping;  //创建 无序哈希表
        vector<int>rst;    //创建 存储结果的向量

        for(int i = 0; i < nums.size(); i++)
        {
            mapping[nums[i]] = i;    //实现从 nums[i] -> i 的映射 key值为nums[i],val值为i
        }

        for(int i = 0; i < nums.size(); i++)
        {
            const int gap = target - nums[i];   //计算gap = 目标数 - 当前key值
            if(mapping.find(gap) != mapping.end() && mapping[gap] > i)  //gap是否在哈希表中,且对应的val值比当前i大(避免重复)
            {
                rst.push_back(i);   //i和gap的key值存到rst中
                rst.push_back(mapping[gap]);
                break;  //假设只有一对这样的答案 直接结束
            }
        }
        return rst;
    }
};

