/*****
假设按照升序排序的数组在预先未知的某个点上进行了旋转。

( 例如，数组 [0,1,2,4,5,6,7] 可能变为 [4,5,6,7,0,1,2] )。

请找出其中最小的元素。

你可以假设数组中不存在重复元素。

示例 1:

输入: [3,4,5,1,2]
输出: 1
示例 2:

输入: [4,5,6,7,0,1,2]
输出: 0

**************////

class Solution {
public:
    int findMin(vector<int>& nums) {
        int left = 0;
        int right = nums.size() -1 ;
        while (left < right )  //左右指针不相交前 如果相交 说明left == right == mid
        {
            int mid = (left + right) / 2;  //取中间
            if(nums[mid] > nums[right])  //如果中间比最右边的大，由于是升序数组说明mid还在第一段上面
            {
                left = mid + 1; //更新左指针,这里可以+1由于mid肯定不是最小的
            }
            else
            {
                right = mid; //否则说明mid已经在右边的一段
            }
        }
        return nums[right];
        //如果数组未旋转 则mid已经在右边的一段 那就是用有序数组二分法找最小
    }
};
